generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  products      Product[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  password      String?
  role          UserRole        @default(USER)
  Authenticator Authenticator[]
  orders        Order[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  image       String
  basePrice   Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  orderItems  OrderItem[] // Relation to the join table
  userId      String? // Foreign key to User
  user        User?       @relation(fields: [userId], references: [id]) // Correct relation
}

model Order {
  id            String      @id @default(cuid())
  paid          Boolean     @default(false)
  totalPrice    Float
  phone         String
  streetAddress String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[] // Relation to the join table
  userId        String // Foreign key to User
  user          User        @relation(fields: [userId], references: [id]) // Correct relation
}

// Join table for many-to-many relationship between Product and Order
model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int     @default(1)
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String

  @@unique([productId, orderId]) // Ensure uniqueness of product-order pairs
}

// auth schema 

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum UserRole {
  USER
  ADMIN
}
